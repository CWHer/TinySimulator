import dataclasses
from enum import Enum
from typing import List, Optional

from component_class import Operator


class DecisionPhase(Enum):
    # NOTE: optimize pass is interleaved with backward pass
    FORWARD = 1
    BACKWARD = 2


class DecisionType(Enum):
    LOAD = 1        # load data from slow memory
    STORE = 2       # store data to slow memory
    ALLOCATE = 3    # allocate fast memory
    PURGE = 4       # purge fast memory (NOTE: generated by the simulator)
    OPTIMIZE = 5    # optimize the parameters
    COMPUTE = 6     # run the operator
    COMMIT = 7      # commit the computation (NOTE: generated by the simulator)


class MemoryBlockType(Enum):
    PARAM = "param"
    INPUT = "input"
    OUTPUT = "output"
    GRAD = "grad"
    PASS_GRAD = "pass_grad"


@dataclasses.dataclass
class Decision:
    wall_time: float  # when this decision happens
    decision_phase: DecisionPhase
    decision_type: DecisionType

    # which memory block to load/store/allocate
    memory_block: Optional[MemoryBlockType]
    operator: Operator  # apply to which operator
    # (NOTE: num input channels for forward, num output channels for backward)
    channel_ids: List[int]  # apply to which channels

    # TODO: backward pass only
    # pruned_channels: List[int]
